
++++
Algoritm nima?
====
#Bir masalani yechish uchun ketma-ket bajariladigan aniq qadamlar to‘plami

++++
Psevdokod nima?
====
#Algoritmni insonlarga tushunarli bo‘lgan tarzda yozish usuli

++++
Sikl nima?
====
#Takrorlanuvchi amallarni bajarish uchun ishlatiladigan tuzilma

++++
Asimptotik tahlil nima?
====	
#Algoritmning samaradorligini o'lchash uchun uning ishlash vaqtini va xotira iste'molini taqqoslash usuli.

++++
Algoritmning samaradorligi nima?
====
#Algoritmning ishlash vaqti va xotira iste'molini o'lchash.

++++
Qaysi murakkablikda algoritm eng samarali ishlaydi?
====
#O(1)

++++
Asimptotik tahlilning maqsadi nima?
====
#Algoritmning ishlash vaqtini yirik ma'lumotlar bilan baholash

++++
Psevdokodda qanday konstruktsiyalar ishlatiladi?
====
#Oddiy matematik amallar, shartli operatorlar, sikllar va funksiyalar

++++
Psevdokodda sikl qanday ifodalanadi?
====
#"For", "While", "Repeat" kabi so'zlar orqali

++++
 Psevdokodning afzalliklari nimada?
====
#Tushunarli va aniq ifodalanish, dasturlash tiliga bog'liq bo'lmasligi

++++
 Psevdokodda qanday shartli operator ishlatiladi?
====
#If-Else

++++
 Psevdokodda qanday holatda sikl ishlatiladi?
====
#Biror amalni bir necha marta takrorlash zarur bo'lsa

++++
 Vaqt murakkabligi O(n^2) bo'lgan algoritmda n ikki marta oshganda, ish vaqti qanday o'zgaradi?
====
#Ish vaqti to'rt marta oshadi

++++
 Algoritmni optimallashtirishda nimaga e'tibor qaratish kerak?
====
#Vaqt va xotira samaradorligini yaxshilash

++++
 Algoritmni samarali qilishda qanday yondashuvlar mavjud?
====
#Asimptotik tahlil, optimallashtirish va kiritish parametrlarini o'zgartirish

++++
 Funksiyalarni vizualizatsiya qilishda qanday grafigi ishlatiladi?
====
#X-Y o'qidagi nuqtalar orqali grafik tasvirlash

++++
 Qaysi turdagi diagrammalar funksiyani yaxshi tasvirlaydi?
====
#Chiziqli grafiklar

++++
 Funksiya grafi qanday yordam beradi?
====
#Funksiyaning xususiyatlarini vizual ravishda ko'rsatish

++++
 Funksiyalarni vizualizatsiya qilishda qanday asboblar ishlatiladi?
====
#Grafika dasturlari va matematik kutubxonalar

++++
 Funksiya grafigini yaratishda qaysi o'zgarishlar ko'rinishi mumkin?
====
#Funksiyaning o'sishi, kamayishi yoki to'xtashi

++++
 Pseudo-tasodifiy sonlar nima?
====
#Dastur tomonidan ishlab chiqilgan, lekin to'liq tasodifiy bo'lmagan sonlar

++++
 Qaysi algoritm eng mashhur pseudo-tasodifiy sonlar generatori sifatida ishlatiladi?
====
#Linear Congruential Generator (LCG)

++++
 Tasodifiy qiymatlar generatorining asosiy cheklovlaridan biri nima?
====
#Pseudo-tasodifiy sonlar har doim bir xil ketma-ketlikni qaytarishi mumkin

++++
PTSG tizimida ma'lumotlar qanday himoyalanadi?
====
#Kriptografik algoritmlar orqali

++++
Massivlarni randomizatsiya qilish nima uchun ishlatiladi?
====
#Massivdagi elementlarni tasodifiy tartibda joylashtirish

++++
 Massivni randomizatsiya qilish uchun tasodifiy sonlar qanday olinadi?
====
#Random yoki pseudorandom generator yordamida

++++
 Yevklid algoritmi qanday hisoblash usuliga asoslanadi?
====
#Bo‘lish orqali qoldiqni topish

++++
 Yevklid algoritmining vaqt murakkabligi qanday bo‘ladi?
====
#O(log(min(a, b)))

++++
 Yevklid algoritmi yordamida ikkita sonning eng katta bo‘luvchisi topilganidan so‘ng nima qilinadi?
====
#Algoritm to‘xtatiladi

++++
 Yevklid algoritmi qaysi turlardagi sonlar uchun samarali ishlaydi?
====
#Butun sonlar uchun

++++
 Yevklid algoritmi yordamida ikkita sonning eng katta bo‘luvchisini topish uchun necha marta bo‘lish jarayoni amalga oshiriladi?
====
#Sonlar bir-biriga bo‘lish jarayonlari davom etadi, qoldiq nolga teng bo‘lgunga qadar

++++
 Tub son nima?
====
#Faqat 1 va o'ziga bo‘linadigan son

++++
 Quyidagi sonlardan qaysi biri tub son?
====
#7

++++
 Quyidagi sonlardan qaysi biri tub emas?
====
#21

++++
 Quyidagi sonlardan qaysi biri tub sonlar?
====
#3, 11, 19

++++
 Quyidagi sonlar orasida eng kichik tub sonni aniqlang.
====
#7

++++
 Sonli integratsiya usulidan foydalanishning asosiy maqsadi nima?
====
#Analitik integrallarni hisoblashda noaniqlikni kamaytirish

++++
 Sonli integratsiya usullarining asosiy maqsadi nima?
====
#Funksiyaning integralini aniq hisoblash imkoniyatiga ega bo‘lish

++++
 Monte-Karlo usuli odatda qanday muammolarni hal qilishda qo'llaniladi?
====
#Murakkab integral hisoblashda.

++++
 Monte-Karlo integratsiyasi qaysi turdagi muammolarga samarali javob beradi?
====
#Ko'p o'lchovli integral hisoblashlar.

++++
 Monte-Karlo usulida integralni qanday hisoblashadi?
====
#Tasodifiy nuqtalar yordamida integralni o'rtacha qiymatini olish.

++++
Monte-Karlo integratsiyasi qanday xususiyatga ega?
====
#Katta miqdordagi tasodifiy nuqtalar orqali yuqori aniqlikka erishish.

++++
 Monte-Karlo usuli bilan qaysi turdagi integrallarni hisoblash oson?
====
#Yuqori o'lchamli, murakkab integral hisoblashlar.

++++
 Monte-Karlo metodida nechta tasodifiy nuqta tanlanishi kerak?
====
#Nuqtalar soni ortib borishi bilan aniqlik ortadi.

++++
 Adaptive Midpoint Integration ning asosiy afzalligi nima?
====
#Integralda xatolikni kamaytirish uchun intervalni moslashtirish.

++++
 Adaptive Midpoint Integration usulining ishlash prinsipi qanday?
====
#Integralni hisoblashda intervalni kichik qismlarga bo'lish va har bir kichik qismini alohida hisoblash.

++++
 Adaptive Trapezoid Integration usuli nima?
====
#Funksiya grafigi ostidagi maydonni hisoblashda trapezoidlar yordamida intervalni kichik qismlarga bo'lish usuli.

++++
 Adaptive Trapezoid Integration qanday holatlarda samarali ishlaydi?
====
#Murakkab va yuqori aniqlikni talab qiladigan integrallarni hisoblashda.

++++
 Massiv nima?
====
#Bir xil turdagi elementlarni saqlovchi ma'lumotlar tuzilmasi.

++++
 Massivning o'lchamini qanday aniqlash mumkin?
====
#Elementlar sonini hisoblash orqali.

++++
 Massivdagi elementlarga qanday murojaat qilish mumkin?
====
#Indeks yordamida.

++++
 Massivlar qanday turdagi ma'lumotlarni saqlay oladi?
====
#Faqat bitta turdagi ma'lumotlarni (masalan, faqat butun sonlar yoki faqat stringlar).

++++
 Massivni yaratishda indekslar qanday ishlatiladi?
====
#Indekslar 0 dan boshlanadi.

++++
 Massivda bir elementni yangilash uchun qanday operatsiya bajariladi?
====
#Indeksni ishlatib, yangi qiymatni yozish.

++++
 Massivning uzunligini qanday olish mumkin?
====
#Massivning elementlar sonini olish orqali.

++++
 Massiv bilan ishlashda qanday xatoliklar yuzaga kelishi mumkin?
====
#Indeksning chegaradan tashqariga chiqishi (out-of-bounds error).

++++
 Stek nima?
====
#LIFO (Last In, First Out) prinsipiga asoslangan ma'lumotlar tuzilmasi.

++++
 Navbat nima?
====
#FIFO (First In, First Out) prinsipiga asoslangan ma'lumotlar tuzilmasi.

++++
 Stekni qanday tushunish mumkin?
====
#So'nggi qo'shilgan element birinchi o'chiriladigan ma'lumotlar tuzilmasi.

++++
 Navbatda qanday ma'lumotlar qo'shiladi?
====
#Birinchi qo'shilgan element birinchi olib tashlanadi.

++++
 Bir o'lchovli massiv nima?
====
#Faqat bitta qator yoki ustundan iborat bo‘lgan massiv.

++++
 Ikki o'lchovli massiv qanday ko'rinishga ega?
====
#Qatorlar va ustunlar shaklida tashkil topgan massiv.

++++
 Bir o'lchovli massivdagi elementlarga qanday murojaat qilish mumkin?
====
#Indeks yordamida, masalan, massiv[0].

++++
 Ikki o'lchovli massivda elementga qanday murojaat qilish mumkin?
====
#Indekslar yordamida, masalan, massiv[0][1].

++++
 Ikki o'lchovli massivda qator va ustunlar qanday aniqlanadi?
====
#Massivning birinchi indeksi qatorni, ikkinchi indeksi esa ustunni bildiradi.

++++
 Ikki o'lchovli massivning o'lchamini qanday aniqlash mumkin?
====
#Qatorlar soni va ustunlar sonini hisoblash orqali.

++++
 Yuqori o'lchamli massiv nima?
====
#Ikki yoki undan ko'proq o'lchovga ega bo'lgan massiv.

++++
 Yuqori o'lchamli massivlar qachon foydalidir?
====
#Ko'p o'lchovli ma'lumotlarni saqlash va tahlil qilishda.

++++
 Matritsa nima?
====
#Raqamlar yoki ifodalar tartibiga joylashtirilgan to‘g‘ri to‘rtburchak shaklidagi ma’lumotlar jadvali.

++++
 Matritsa qanday belgilanadi?
====
#Har bir element o'z indekslari orqali, masalan, A[i][j].

++++
 Matritsaning o'lchamlari qanday belgilanadi?
====
#Matritsada satrlar va ustunlar soni yordamida, masalan, m × n.

++++
 Matritsa elementlarini qanday o'zgartirish mumkin?
====
#Indekslarni ishlatib, masalan, A[i][j] = yangiQiymat.

++++
 Matritsaning transponirlash nima?
====
#Matritsaning satrlarini ustunlarga, ustunlarini esa satrlarga aylantirish.

++++
 Kvadrat matritsa nima?
====
#Satrlari va ustunlari soni teng bo‘lgan matritsa.

++++
Bubble sort algoritmi qanday ishlaydi?
====
#Har bir elementni qo'shni bilan solishtirib, kerak bo'lsa almashtiradi.

++++
 Insertion sort qanday ishlaydi?
====
#Har bir elementni o'z joyiga qo'yish uchun bir-biriga qarshi solishtiradi va qo'yadi.

++++
 Bubble sortning eng yomon ishlash holati qanday?
====
#O(N^2) – agar massiv teskari tartibda bo'lsa.

++++
 O(N²) murakkablikdagi algoritmlar qaysi holatda yaxshi ishlaydi?
====
#Kichik massivlar yoki nisbatan kam tartibga ega ma'lumotlar uchun.

++++
 Insertion sortning afzalligi nima?
====
#Kichik massivlar uchun samarali va barqaror ishlaydi.

++++
 Bubble sortning yomon ishlash holati nima?
====
#Katta massivlar yoki massiv teskari tartibda bo'lsa.

++++
 Selection sort algoritmi qanday ishlaydi?
====
#Har bir qadamda minimal elementni tanlab, uni o'z joyiga qo'yadi.

++++
 O(N²) murakkablikdagi saralash algoritmlarining umumiy xususiyati nima?
====
#Ular odatda kichik massivlar uchun samarali va soddaligi bilan ajralib turadi.

++++
 Kiritib saralash algoritmi qanday ishlaydi?
====
#Har bir elementni o'z joyiga qo'yish uchun bir-biriga qarshi solishtiradi va joylashtiradi.

++++
Kiritib saralash algoritmi nima uchun samarali bo'ladi?
====
#Kichik massivlar va ko'p tartiblangan ma'lumotlar uchun samarali.

++++
 Kiritib saralash algoritmining afzalligi nima?
====
#Oddiy va kam xotira talab qiladi.

++++
 Selection Sort algoritmi qanday ishlaydi?
====
#Har bir qadamda minimal yoki maksimal elementni tanlab, uni o'z joyiga qo'yadi.

++++
 Selection Sortning afzalligi nima?
====
#Kichik massivlar va nisbatan tartiblangan ma'lumotlar uchun samarali.

++++
 Selection Sort algoritmi qanday ishlash mexanizmini qo'llaydi?
====
#Har bir qadamda minimal yoki maksimal elementni topib, uni o'z joyiga qo'yadi.

++++
 Selection Sort algoritmida qaysi operatsiya ko'proq bajariladi?
====
#Solishtirish va almashtirish operatsiyalari ko'proq bajariladi.

++++
 Quick Sort algoritmining afzalligi nima?
====
#Odatda samarali va tez ishlaydi, ayniqsa katta massivlarda.

++++
 Counting Sort algoritmi qanday ishlaydi?
====
#Har bir elementning nechta takrorlanishini hisoblab massivni saralaydi.

++++
 Counting Sort algoritmi qaysi holatlarda samarali bo'ladi?
====
#Elementlarning qiymatlari kichik va ma'lum bir diapazonga ega bo'lsa.

++++
 Counting Sortda qanday xotira talab qilinadi?
====
#Elementlarning qiymatlari diapazoni bo'yicha qo'shimcha xotira talab qilinadi.

++++
 Counting Sort algoritmi qanday xususiyatlarga ega?
====
#Barqaror algoritm bo'lib, teng qiymatli elementlarning tartibini saqlaydi.

++++
 Merge Sort algoritmi qanday ishlaydi?
====
#Massivni ikki qismga bo'lib, har bir qismini alohida saralaydi va keyin ularni birlashtiradi.

++++
 Merge Sort algoritmi qanday holatlarda samarali ishlaydi?
====
#Har qanday holatda samarali bo'ladi, chunki uning vaqt murakkabligi O(N log N) bo'ladi.

++++
 Merge Sortning qo'shimcha xotira talab qilishi haqida nima deyiladi?
====
#Ha, merge jarayonida yangi massivlar uchun qo'shimcha xotira talab qilinadi.

++++
 Merge Sort algoritmi qaysi turdagi algoritmga kiradi?
====
#Rekursiv algoritm.

++++
  Kiritib saralash (Insertion Sort) algoritmi qanday ishlaydi?
====
#Har bir yangi elementni saralangan qismga mos ravishda joylashtiradi.

++++
 Tanlab saralash (Selection Sort) algoritmi qanday ishlaydi?
====
#Massivda eng kichik elementni topib uni joylashtiradi, so'ngra qolgan elementlar bilan ishlaydi.

++++
 Piramidali saralash (Heap Sort) algoritmi qanday ishlaydi?
====
#Heaps tuzilmasidan foydalangan holda eng katta yoki eng kichik elementni topib, uni massivdan chiqaradi.

++++
  Tezkor saralash (Quick Sort) algoritmi qanday ishlaydi?
====
#Pivotni tanlab, massivni kichik va katta qismlarga bo'lib, har bir qismini alohida saralaydi.

++++
  Birlashtirib saralash (Merge Sort) algoritmi qanday ishlaydi?
====
#Massivni ikki qismga bo'lib, har bir qismini alohida saralaydi va keyin ularni birlashtiradi.

++++
 Sanab saralash (Counting Sort) algoritmi qanday ishlaydi?
====
#Elementlarning nechta takrorlanishini hisoblab, massivni saralaydi.

++++
 Tanlab saralash (Selection Sort) algoritmining afzalligi nima?
====
#Oddiy va tushunarli, lekin katta massivlarda samarali emas.

++++
 Chiziqli qidiruv algoritmi qanday ishlaydi?
====
#Massivning har bir elementini ketma-ket solishtirib, kerakli elementni topadi.

++++
 Chiziqli qidiruv algoritmi qaysi murakkablikka ega?
====
#O(N) - massivdagi barcha elementlarni tekshiradi.

++++
 Chiziqli qidiruv algoritmi qanday holatlarda samarali ishlaydi?
====
#Massiv kichik yoki tartibsiz bo'lsa.

++++
 Chiziqli qidiruv algoritmining afzalligi nima?
====
#Oddiy va tushunish oson, kichik massivlar uchun tez ishlaydi.

++++
 Chiziqli qidiruv algoritmining eng yomon ishlash holati qanday?
====
#O(N) - massivning oxiridagi elementni topish uchun barcha elementlarni tekshiradi.

++++
 Chiziqli qidiruv algoritmi qanday holatlarda ishlatiladi?
====
#Massiv tartiblanmagan yoki kichik massivlarda.

++++
 Chiziqli qidiruv algoritmi necha marta ishlatiladi?
====
#Har bir elementni tekshirib kerakli elementni topgach algoritm to'xtaydi.

++++
 Chiziqli qidiruvni optimallashtirishning qanday yo'llari mavjud?
====
#Agar kerakli element topilsa, qidirishni to'xtatish.

++++
 Chiziqli qidiruv algoritmi qaysi turdagi ma'lumotlar bilan ishlaydi?
====
#Tartiblanmagan yoki tasodifiy tartibdagi ma'lumotlar bilan ishlaydi.

++++
 Ikkilik qidiruv algoritmi qanday ishlaydi?
====
#Massivni ikki qismga bo'lib, har bir qismda qidirishni amalga oshiradi.

++++
 Ikkilik qidiruvni faqat qanday holatda ishlatish mumkin?
====
#Massiv saralangan bo'lishi kerak.

++++
Ikkilik qidiruv algoritmida qanday murakkablik mavjud?
====
#O(log N) - har safar massivni yarmiga qisqartiradi.

++++
 Ikkilik qidiruv algoritmida qanday tuzilma ishlatiladi?
====
#Massivni ikki qismga bo'lish va har bir qismini tekshirish.

++++
 Ikkilik qidiruvni optimallashtirish qanday amalga oshiriladi?
====
#Har safar massivni yarmiga bo'lib, qidirish davom ettiriladi.

++++
Interpolyatsion qidiruv algoritmi qanday ishlaydi?
====
#Massivni har bir qiymatni prognoz qilib, qidirishni amalga oshiradi.

++++
 Interpolyatsion qidiruv algoritmining asosiy farqi nima?
====
#Interpolyatsion qidiruv elementning qiymati bo'yicha tahmin qiladi va ularning indekslarini solishtiradi.

++++
 Interpolyatsion qidiruvda qidirilayotgan elementning indeksini qanday hisoblashadi?
====
#Elementning qiymati va boshlang'ich va oxirgi indekslarni hisobga olgan holda interpolatsiya formula orqali.

++++
 Interpolyatsion qidiruvni qanday holatda ishlatish mumkin?
====
#Faqat saralangan va teng taqsimlangan elementlar bilan ishlaydi.

++++
 Interpolyatsion qidiruvning yomon ishlash holati qanday?
====
#O(N) — agar elementlar teng tarqatilmagan bo'lsa yoki massivda aniq tartib yo'q bo'lsa.

++++
 Interpolyatsion qidiruvni optimallashtirish qanday amalga oshiriladi?
====
#Elementning qiymati bilan bog'liq prognozlarni hisobga olish orqali.

++++
 Interpolyatsion qidiruv algoritmi qanday xususiyatlarga ega?
====
#Tez ishlaydi, agar massivdagi elementlar teng va doimiy tarzda tarqatilgan bo'lsa.

++++
 Interpolyatsion qidiruvning ishlash murakkabligi qanday?
====
#O(log log N) - elementlar doimiy ravishda tarqatilgan bo'lsa.

++++
 Xesh-jadval (hash table) nima?
====
#Ma'lumotlarni tezkor qidirish va saqlash uchun ishlatiladigan tuzilma.

++++
 Xesh-funksiyaning vazifasi nima?
====
#Ma'lumotni indekslash va saqlash uchun yagona kalit yaratish.

++++
 Xesh-jadvalda koliziyalar (collisions) nima?
====
#Bir xil xesh qiymatini hosil qilgan ikkita turli kalitlar.

++++
 Xesh-jadvalning qanday afzalliklari bor?
====
#Ma'lumotlarga tezkor kirish imkonini beradi.

++++
 Rekursiya nima?
====
#Funksiya o'zini o'zi chaqiradigan jarayon.

++++
 Rekursiyali algoritmlarda asosiy prinsip nima?
====
#Muammoni kichikroq bo'laklarga bo'lib, har bir bo'lakni hal qilish.

++++
 Quyidagi algoritmlardan qaysi biri rekursiyaga asoslangan?
====
#Fibonacci sonlarining hisoblanishi.

++++
 Quyidagi algoritmalardan qaysi biri rekursiv usulda amalga oshiriladi?
====
#Factorial (faktorial) hisoblash.

++++
 Faktorial nima?
====
#Biror sonni o'zidan kichik barcha musbat butun sonlar bilan ko'paytirish.

++++
 5 faktorial (5!) qanday hisoblanadi?
====
#5! = 5 × 4 × 3 × 2 × 1 = 120.

++++
 Faktorialni hisoblashda qaysi yondashuv samaraliroq?
====
#Rekursiv yondashuv.

++++
 7 (7!) faktorialni hisoblang.
====
#7! = 7 × 6 × 5 × 4 × 3 × 2 × 1 = 5040.

++++
 Fibonacci sonlari qanday tarzda hisoblanadi?
====
#Har bir son oldingi ikkita sonning yig'indisi sifatida hisoblanadi.

++++
Fibonacci ketma-ketligining sonlari qaysi?
====
#1, 2, 3, 5, 8, 13

++++
 Fibonacci sonlari qaysi yondashuv bilan hisoblanadi?
====
#Rekursiv yondashuv.

++++
 6-fibonacci soni qaysi	?
====
#8.

++++
 Xanoy minorasi muammosi nima?
====
#N ta disklardan iborat minorani boshqa minoraga ko'chirish, shu bilan birga, har bir diskni faqat katta disk ustiga qo'ymay, kichik disklari katta diskdan yuqorida joylashtirish.

++++
 Xanoy minorasi muammosi qanday ishlaydi?
====
#Rekursiv yondashuv orqali yechiladi.

++++
 Agar N = 3 bo'lsa, Xanoy minorasida nechta harakat qilish kerak?
====
#7 harakat (2^3 - 1).

++++
 Xanoy minorasi muammosining fizikaviy ko'rinishi qanday bo'ladi?
====
#Disklar bir-biriga ustma-ust joylashtirilgan va har biri kichik diskdan kattaroq diskdan yuqorida turishi kerak.

++++
 Grafda rekursiv algoritmlar qanday ishlaydi?
====
#Graflarda rekursiya yordamida har bir tugunni tekshirib chiqamiz va unga tegishli barcha bog'lanishlarni hisoblaymiz.

++++
 Graflarda rekursiv DFS algoritmida qanday xatoliklar yuz berishi mumkin?
====
#Agar graflarda sikl bo'lsa, rekursiya cheksiz takrorlanishi mumkin.

++++
 Hilbert egri chizig‘i nima?
====
#Bu o'z-o'zini krosslaydigan egri chiziq bo'lib, u butun tekislikni to'ldiradi.

++++
 Hilbert egri chizig'ining asosiy xususiyati nima?
====
#U ko'pgina marta o'zini kesib o'tadigan, ammo uzluksiz bo'lgan egri chiziqdir.

++++
 Hilbert egri chizig‘i qaysi geometriya turiga kiradi?
====
#Fraktal geometriya.

++++
 Hilbert egri chizig‘ini kim kashf etgan?
====
#David Hilbert.

++++
 Hilbert egri chizig‘ining xususiyatlari qanday?
====
#U haqiqiy o'lchovga ega bo'lgan uzluksiz va kesishgan egri chiziq.

++++
 Hilbert egri chizig‘i bilan qanday geometrik masalalar yechiladi?
====
#Fraktal va uzluksiz chiziqlar bilan bog'liq masalalar.

++++
 Hilbert egri chizig‘i qanday tarzda tekshiriladi?
====
#Fraktal xususiyatlariga asoslangan tahlillar yordamida.

++++
Orqaga qaytish algoritmi nima?
====
#Muammoning yechimini topish uchun barcha mumkin bo'lgan yo'llarni sinab ko'rish usuli

++++
Orqaga qaytish algoritmini qanday misolda ishlatish mumkin?
====
#Sudoku oynasini yechishda

++++
Orqaga qaytish algoritmi yordamida quyidagi qaysi muammoni yechish mumkin?
====
#Kombinatsion optimizatsiya

++++
Orqaga qaytish algoritmida qachon to'xtash kerak?
====
#Yechim topilganda yoki barcha imkoniyatlar sinovdan o'tkazilganda

++++
8 malika muammosi nima?
====
#8 ta malikaning bir-birini hujum qilmasdan, chess taxtasida joylashtirilishi

++++
8 malika muammosi qanday hal qilinadi?
====
#Orqaga qaytish algoritmi yordamida

++++
8 malika muammosida malika qanday hujum qiladi?
====
#Vertikal, gorizontal va diagonal chiziqlarda hujum qiladi

++++
8 malika muammosi uchun eng tezkor yechimni qaysi usul beradi?
====
#Orqaga qaytish algoritmi

++++
Ikkilik daraxt nima?
====
#Har bir tugunning eng ko'pi bilan ikkita farzandi bo'lgan daraxt

++++
Ikkilik daraxtni qanday qilib to'liq (full) daraxt deb atash mumkin?
====
#Har bir tugun ikki farzandga ega bo'lishi kerak

++++
Daraxtning ildiz tuguni qanday joylashadi?
====
#Daraxtning boshlang'ich tuguni, undan boshqa barcha tugunlar tarqaladi

++++
Daraxtda tugunlar joylashtirilayotganda qaysi prinsipni hisobga olish kerak?
====
#Tugunlar bir-biriga bog'lanishi va ierarxik tizimni tashkil etishi kerak

++++
Daraxtni qurishda barcha tugunlar qanday aloqalar orqali bog'lanadi?
====
#Tugunlar ota-bola aloqalari orqali bog'lanadi

++++
Tartiblangan daraxtda yangi tugun joylashishidan oldin nima tekshiriladi?
====
#Tugunning qiymati ildiz va uning farzandlari bilan solishtiriladi

++++
Tartiblangan daraxtda izlash jarayoni qanday amalga oshiriladi?
====
#Ildizdan boshlanib, qiymatga mos ravishda chap yoki o'ng tomonga qarab izlanadi

++++
Muvozanatli daraxt nima?
====
#Daraxtning chap va o'ng subdaraxtlarining balandligi bir xil yoki farqi bitta tugundan oshmaydi

++++
AVL daraxtining xususiyati nima?
====
#Chap va o'ng subdaraxtlar orasidagi balandlik farqi har doim 1 dan kichik yoki teng bo'ladi

++++
Muvozanatli daraxtda qaysi amallar samarali bo'ladi?
====
#Izlash, qo'shish va o'chirish amallari samarali ishlaydi

++++
Qaror daraxtida har bir tugun nima qiladi?
====
#Qaror tuguni ma'lum bir xususiyatga asoslanib, ma'lumotni ikkita yoki undan ortiq guruhga ajratadi

++++
AVL daraxtida balansni tiklash uchun qanday amallar bajariladi?
====
#Rotatsiya amallari

++++
Qaror daraxti qaysi holatda foydalidir?
====
#Tasniflash yoki regressiya muammolarini hal qilishda

++++
P sinfi qanday masalalarni o'z ichiga oladi?
====
#Polinom vaqt ichida hal qilinadigan masalalar

++++
NP sinfi qanday masalalarni o'z ichiga oladi?
====
#Polinom vaqt ichida tekshirilishi mumkin bo'lgan, lekin hal qilinishi qiyin bo'lgan masalalar

++++
P va NP masalalari orasidagi asosiy farq nima?
====
#P sinfi polinom vaqt ichida hal qilinadigan masalalarni, NP sinfi esa polinom vaqt ichida tekshirilishi mumkin bo'lgan masalalarni o'z ichiga oladi

++++
P = NP masalasi nima deganidir?
====
#P sinfi va NP sinfi bir xil, ya'ni har bir NP masalasi P sinfiga ham kiritiladi

++++
Taqsimlangan algoritmlar nima?
====
#Bir nechta mustaqil hisoblash birliklari tomonidan bajariladigan algoritmlar

++++
Taqsimlangan tizimlarda qanday asosiy muammo mavjud?
====
#Ma'lumotlar va resurslarni sinxronlash muammosi

++++
Taqsimlangan algoritmlarda sinxronizatsiya nima?
====
#Hisoblash birliklari orasida vaqtni va operatsiyalarni moslashtirish

++++
Taqsimlangan algoritmlarda vazifalar qanday taqsimlanadi?
====
#Vazifalar bir nechta hisoblash birliklariga bo'linadi

++++
Taqsimlangan tizimlarda xato boshqarish qanday amalga oshiriladi?
====
#Har bir tizim xato yuz berganida mustaqil ravishda ishni tiklashga harakat qiladi

++++
 Sistolik massivlar nima?
====
#Paralel hisoblash tizimlari bo'lib, massivdagi elementlar bir-biri bilan ma'lumot almashadi

++++
Sistolik massivlarning asosiy xususiyati nima?
====
#Hisoblash va ma'lumotlar oqimi tizimda paralel ravishda ishlaydi

++++
Sistolik massivlar qanday ishlaydi?
====
#Ma'lumotlar tizimda bir yo'nalishda oqadi va hisoblash bloklari bir-biri bilan parallel ishlaydi

++++
Sistolik massivlarda paralelizm qanday ishlaydi?
====
#Bir vaqtning o'zida bir nechta hisoblash bloklari ma'lumotlarni qayta ishlaydi

++++
Sistolik massivlarning qanday afzalliklari mavjud?
====
#Tez va samarali paralel hisoblashni amalga oshirish imkoniyati
Tizimda faqat bitta operatsiya bajarish

++++
Ko‘p protsessorli tizimlar nima?
====
#Bir nechta protsessorlar birgalikda ishlaydigan tizimlar

++++
Ko‘p protsessorli tizimlar qanday afzalliklarga ega?
====
#Paralel hisoblashni amalga oshirish imkoniyati

++++
Ko‘p protsessorli tizimlar qanday muammolarga duch kelishi mumkin?
====
#Sinxronizatsiya va resurslarni taqsimlash muammolari

++++
Kvant hisoblash qanday asosda ishlaydi?
====
#Kvant mexanikasi prinsiplari asosida

++++
Kvant hisoblashning afzalliklaridan biri nima?
====
#Paralel hisoblash imkoniyatlari va murakkab masalalarni tezda hal qilish

++++
Kvant hisoblashning qo'llanish sohalari qanday bo'lishi mumkin?
====
#Kriptografiya, optimallashtirish, sun'iy intellekt va boshqa murakkab hisoblash masalalari

++++
Chiziqli algoritm nima?
====
#Bir qator ketma-ket bajariladigan amallarni ifodalovchi algoritm

++++
Takrorlanuvchi algoritm nima?
====
#Amallarni bir necha marta takrorlash orqali bajariladigan algoritm

++++
Algoritmni loyihalash jarayonida birinchi bosqich nima?
====
#Muammoni aniqlash

